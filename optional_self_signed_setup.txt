# 🌐 NGINX Load Balancer Setup with HTTPS for Backend (Manual Guide) 🎯
# This guide explains how to configure NGINX to securely communicate with backend servers over HTTPS.

# 🚀 Step 1: Ensure NGINX and Certbot are Installed
sudo apt update && sudo apt upgrade -y
sudo apt install nginx -y
sudo apt install certbot python3-certbot-nginx -y

# 🛠️ Step 2: Create Modular NGINX Configuration for example.com
sudo nano /etc/nginx/sites-available/example.com

# Add the following content to the file:
upstream example_backend {
    server 192.168.1.10;  # HTTPS backend server 1 🟢
    server 192.168.1.11;  # HTTPS backend server 2 🟢
    server 192.168.1.12;  # HTTPS backend server 3 🟢
}

server {
    listen 443 ssl;
    server_name example.com www.example.com;

    # SSL certificates (generated by Certbot) 📜
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Additional SSL settings for security 🔒
    ssl_protocols TLSv1.2 TLSv1.3;             # Use secure TLS versions
    ssl_ciphers HIGH:!aNULL:!MD5;              # Strong ciphers
    ssl_prefer_server_ciphers on;              # Prioritize server ciphers
    ssl_session_cache shared:SSL:10m;          # Cache SSL sessions

    # Forward traffic to backend servers 🔀
    location / {
        proxy_pass https://example_backend;            # Communicate with backend over HTTPS
        proxy_ssl_verify on;                           # Verify backend SSL certificate
        proxy_ssl_trusted_certificate /etc/nginx/ssl/backend.crt;  # Backend's self-signed certificate
        proxy_set_header Host $host;                  # Pass original host header
        proxy_set_header X-Real-IP $remote_addr;       # Forward client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client IP chain
        proxy_set_header X-Forwarded-Proto $scheme;    # Forward protocol (https)
    }
}

# Save and exit the file (Ctrl+O, Enter, Ctrl+X). ✅

# 🛠️ Step 3: Create Backend SSL Certificate (Optional, For Self-Signed Certificates)
sudo mkdir -p /etc/nginx/ssl
openssl req -nodes -new -x509 -keyout /etc/nginx/ssl/backend.key -out /etc/nginx/ssl/backend.crt -days 5475

# Fill in the required fields during certificate generation:
# Country Name, State/Province, City, Organization Name, Common Name (Domain, e.g., backend.example.com)

# 🔗 Step 4: Enable the NGINX Configuration
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/

# 🔄 Step 5: Reload NGINX and Test the Configuration
sudo nginx -t  # Test the configuration for errors ✅
sudo systemctl reload nginx  # Apply changes 🔁

# 🌟 Step 6: Verify HTTPS Communication Between NGINX and Backend
# Use curl to test the HTTPS communication with the backend:
curl -vk https://example.com

# 🎉 Congratulations! Your NGINX Load Balancer is now configured to securely communicate with backend servers over HTTPS. 💪
