# üåê NGINX Load Balancer Setup with SSL (Frontend) & HTTP (Backend) üéØ
# This setup secures client connections with SSL while using HTTP for backend communication.

# üöÄ 1. Install NGINX and Certbot
sudo apt update && sudo apt upgrade -y   # Update and upgrade system packages
sudo apt install nginx -y                # Install NGINX web server
sudo apt install certbot python3-certbot-nginx -y  # Install Certbot for SSL certificate management

# ‚öô 2. Configure NGINX Load Balancer
sudo nano /etc/nginx/sites-available/default  # Open the NGINX configuration file

# Add the following content:

# Define backend servers (HTTP)
upstream example_backend {
    server 192.168.1.10:80;  # Backend Server 1
    server 192.168.1.11:80;  # Backend Server 2
    server 192.168.1.12:80;  # Backend Server 3
}

# Redirect HTTP to HTTPS
server {
    listen 80;  
    server_name example.com www.example.com;  

    location / {
        return 301 https://$host$request_uri;  # Redirect all HTTP traffic to HTTPS
    }
}

# Main server block (SSL-enabled)
server {
    listen 443 ssl;  
    server_name example.com www.example.com;  

    # specific logs
    access_log /var/log/nginx/example.log main;
    error_log /var/log/nginx/example_error.log warn;

    # SSL Certificates (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;  
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;  

    # Secure SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;  
    ssl_ciphers HIGH:!aNULL:!MD5;  
    ssl_prefer_server_ciphers on;  
    ssl_session_cache shared:SSL:10m;  

    # Forward traffic to backend servers over HTTP
    location / {
        proxy_pass http://example_backend;  # Use HTTP to communicate with backend
        proxy_set_header Host $host;  
        proxy_set_header X-Real-IP $remote_addr;  
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
        proxy_set_header X-Forwarded-Proto $scheme;  
    }
}

# ‚úÖ 3. Enable the Configuration
sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/  # Enable the configuration
sudo nginx -t  # Test the NGINX configuration for syntax errors
sudo systemctl reload nginx  # Reload NGINX to apply changes

# üîí 4. Obtain SSL Certificate with Certbot
sudo certbot --nginx -d example.com -d www.example.com  # Automatically configure SSL

# üîç 5. Verify Setup
curl -vk https://example.com  # Test the public domain connection over HTTPS

# üéØ Your NGINX load balancer is now securing client connections while using HTTP for backend communication!
