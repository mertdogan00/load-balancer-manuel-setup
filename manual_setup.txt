# 🌐 NGINX Load Balancer Setup with SSL (Manual Guide) 🎯
# Follow this guide to set up a modular NGINX load balancer with SSL on Ubuntu.

# 🚀 Step 1: Install NGINX and Certbot
sudo apt update && sudo apt upgrade -y
sudo apt install nginx -y
sudo apt install certbot python3-certbot-nginx -y

# 🛠️ Step 2: Create Modular NGINX Configuration for example.com
sudo nano /etc/nginx/sites-available/example.com

# Add the following content to the file:
upstream example_backend {
    server 192.168.1.10;  # Example backend server 1 🟢
    server 192.168.1.11;  # Example backend server 2 🟢
    server 192.168.1.12;  # Example backend server 3 🟢
}

server {
    listen 80;
    server_name example.com www.example.com;

    # Redirect HTTP to HTTPS 🔒
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name example.com www.example.com;

    # SSL certificates (generated by Certbot) 📜
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Forward traffic to backend servers 🔀
    location / {
        proxy_pass http://example_backend;
        proxy_set_header Host $host;               # Pass original host header
        proxy_set_header X-Real-IP $remote_addr;   # Client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward all client IPs in the proxy chain to the backend
        proxy_set_header X-Forwarded-Proto $scheme;    # Pass the protocol used by the client (http or https)
    }
}

# Save and exit the file (Ctrl+O, Enter, Ctrl+X). ✅

# 🛠️ Step 3: Create Modular NGINX Configuration for api.example.com
sudo nano /etc/nginx/sites-available/api.example.com

# Add the following content to the file:
upstream api_backend {
    server 10.0.0.1;  # Example backend server 1 🟢
    server 10.0.0.2;  # Example backend server 2 🟢
    server 10.0.0.3;  # Example backend server 3 🟢
}

server {
    listen 80;
    server_name api.example.com;

    # Redirect HTTP to HTTPS 🔒
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name api.example.com;

    # SSL certificates (generated by Certbot) 📜
    ssl_certificate /etc/letsencrypt/live/api.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;

    # Forward traffic to backend servers 🔀
    location / {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;               # Pass original host header
        proxy_set_header X-Real-IP $remote_addr;   # Client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

# Save and exit the file (Ctrl+O, Enter, Ctrl+X). ✅

# 🔗 Step 4: Enable Configuration Files
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/api.example.com /etc/nginx/sites-enabled/

# 🔒 Step 5: Obtain SSL Certificates
sudo certbot --nginx -d example.com -d www.example.com
sudo certbot --nginx -d api.example.com

# 🔄 Step 6: Restart NGINX and Test Configuration
sudo nginx -t  # Test the configuration for errors ✅
sudo systemctl restart nginx  # Restart NGINX 🔁

# 🌟 Final Step: Verify Your Setup
# Visit your domains to ensure everything is working as expected:
# 🔗 https://example.com
# 🔗 https://api.example.com

# 🎉 Congratulations! Your modular NGINX load balancer with SSL is ready. 💪
