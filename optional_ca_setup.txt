# üåê NGINX Load Balancer Setup with HTTPS for Backend (Root CA + Intermediate CA) üéØ

# üöÄ Step 1: Install NGINX and Certbot
sudo apt update && sudo apt upgrade -y
sudo apt install nginx -y
sudo apt install certbot python3-certbot-nginx -y

# üõ† Step 2: Create Root and Intermediate CA Certificates
# üîë 2.1 Generate Root CA Key and Certificate
openssl genrsa -out rootCA.key 4096
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem

# üîí 2.2 Generate Intermediate CA Key and Certificate
openssl genrsa -out intermediateCA.key 4096
openssl req -new -key intermediateCA.key -out intermediateCA.csr
openssl x509 -req -in intermediateCA.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out intermediateCA.pem -days 3650 -sha256

# üõ† Step 3: Create Certificates for Backend
# üîë 3.1 Generate Backend Key and CSR
openssl genrsa -out backend.key 2048
openssl req -new -key backend.key -out backend.csr

# üîí 3.2 Sign Backend Certificate with Intermediate CA
openssl x509 -req -in backend.csr -CA intermediateCA.pem -CAkey intermediateCA.key -CAcreateserial -out backend.crt -days 365 -sha256

# üõ† Step 4: Create Certificates for Load Balancer
# üîë 4.1 Generate Load Balancer Key and CSR
openssl genrsa -out loadbalancer.key 2048
openssl req -new -key loadbalancer.key -out loadbalancer.csr

# üîí 4.2 Sign Load Balancer Certificate with Intermediate CA
openssl x509 -req -in loadbalancer.csr -CA intermediateCA.pem -CAkey intermediateCA.key -CAcreateserial -out loadbalancer.crt -days 365 -sha256

# üõ° Step 5: Combine Intermediate and Root CA Certificates
cat intermediateCA.pem rootCA.pem > /etc/nginx/ssl/ca_chain.pem

# ‚öô Step 6: Configure NGINX
sudo nano /etc/nginx/sites-available/example.com

# Add the following content:
upstream example_backend {
    server 192.168.1.10:443;  # Backend Server 1
    server 192.168.1.11:443;  # Backend Server 2
    server 192.168.1.12:443;  # Backend Server 3
}

server {
    listen 443 ssl;
    server_name example.com www.example.com;

    ssl_certificate /etc/nginx/ssl/loadbalancer.crt;
    ssl_certificate_key /etc/nginx/ssl/loadbalancer.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;

    location / {
        proxy_pass https://example_backend;
        proxy_ssl_verify on;
        proxy_ssl_verify_depth 2;
        proxy_ssl_trusted_certificate /etc/nginx/ssl/ca_chain.pem;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# ‚úÖ Step 7: Enable NGINX Configuration
sudo mkdir -p /etc/nginx/ssl
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

# üîç Step 8: Verify HTTPS Communication
curl --cacert /etc/nginx/ssl/ca_chain.pem https://192.168.1.10
curl -vk https://example.com
