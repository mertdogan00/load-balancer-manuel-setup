# üåê NGINX Load Balancer Setup with HTTPS for Backend (Root CA + Intermediate CA) üéØ
# Terminal-based setup with a black background

# üöÄ 1. Install NGINX and Certbot
sudo apt update && sudo apt upgrade -y    # Update and upgrade system packages
sudo apt install nginx -y                 # Install NGINX web server
sudo apt install certbot python3-certbot-nginx -y  # Install Certbot for SSL certificate management

# üõ† 2. Generate Certificates (Root and Intermediate CA)
# Instead of manually creating certificates, you can use the following tool: üîó 
# GitHub: https://github.com/mertdogan00/ssl-and-ca-toolkit

# ‚öô 3. Configure NGINX Load Balancer
sudo nano /etc/nginx/sites-available/default  # Open the NGINX configuration file

# Add the following content:

# Define backend servers for load balancing
upstream example_backend {
    server 192.168.1.10:443;  # Backend Server 1
    server 192.168.1.11:443;  # Backend Server 2
    server 192.168.1.12:443;  # Backend Server 3
}

server {
    listen 443 ssl;  # Enable SSL on port 443
    server_name example.com www.example.com;  # Define the domain names

    # SSL Certificates (from Let's Encrypt or a custom CA)
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;  # Path to the SSL certificate
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;  # Path to the private key

    # Secure SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;  # Allow only modern TLS versions
    ssl_ciphers HIGH:!aNULL:!MD5;  # Use strong cipher suites
    ssl_prefer_server_ciphers on;  # Prioritize server-defined ciphers
    ssl_session_cache shared:SSL:10m;  # Enable session caching for performance

    # Load balancing to backend servers
    location / {
        proxy_pass https://example_backend;  # Forward traffic to backend servers

        proxy_ssl_verify on;  # Enable SSL verification for backend communication
        proxy_ssl_certificate /etc/ssl/nginx/load_balancer.pem;  # Load balancer SSL certificate
        proxy_ssl_certificate_key /etc/ssl/nginx/load_balancer.key;  # Load balancer private key
        proxy_ssl_trusted_certificate /etc/ssl/nginx/ca_chain.pem;  # CA chain for SSL verification
        proxy_ssl_verify_depth 2;  # Verify up to Intermediate and Root CA

        # Pass client request headers to the backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# ‚úÖ 4. Enable the NGINX Configuration
sudo mkdir -p /etc/nginx/ssl  # Create SSL directory if not exists
sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/  # Enable the configuration
sudo nginx -t  # Test the NGINX configuration for syntax errors
sudo systemctl reload nginx  # Reload NGINX to apply changes

# üîç 5. Verify HTTPS Communication
curl --cacert /etc/nginx/ssl/ca_chain.pem https://192.168.1.10  # Test backend connection using CA chain
curl -vk https://example.com  # Test the public domain connection with verbose output

# üéØ Your NGINX load balancer is now securely handling HTTPS traffic!
